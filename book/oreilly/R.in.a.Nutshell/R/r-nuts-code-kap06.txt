# ====================================================================
# R in a Nutshell (1. Aufl., Dez. 2010)
# Kapitel 06 -- R-Syntax
# ***  R-Code  ***
# 
# Zeichenkodierung: UTF-8
# Schnappschuss   : 2011-01-25 20:11:53 h
# angelegt von    : Jörg Beyer
# ====================================================================

1.1

2

2^1023



# --------------------------------------------------------------------

0x1

0xFFFF



# --------------------------------------------------------------------

typeof(1)



# --------------------------------------------------------------------

typeof(1:1)

typeof(as(1, "integer"))   ### synonym "as.integer()"



# --------------------------------------------------------------------

v <- c(173, 12, 1.12312, -93)



# --------------------------------------------------------------------

# Grenzen der dezimalen Genauigkeit
(2^1023 + 1) == 2^1023

# Grenzen der numerischen Größe
2^1024



# --------------------------------------------------------------------

0+1i ^ 2

sqrt(-1+0i)

exp(0+1i * pi)



# --------------------------------------------------------------------

sqrt(-1)



# --------------------------------------------------------------------

"Hallo"



# --------------------------------------------------------------------

'Hallo'



# --------------------------------------------------------------------

identical("\"Hallo\"", '"Hallo"')
identical('\'Hallo\'', "'Hallo'")



# --------------------------------------------------------------------

Zahlen <- c("Eins", "Zwo", "Drei", "Vier", "Fünf")
Zahlen



# --------------------------------------------------------------------

x <- 1



# --------------------------------------------------------------------

x <- 1
x1 <- 1
X1 <- 2
x1
X1
x1.1 <- 1
x1.1_1 <- 1



# --------------------------------------------------------------------

?`<-`



# --------------------------------------------------------------------

`1 + 2 = 3` <- "Hallo"
`1 + 2 = 3`



# --------------------------------------------------------------------

c



# --------------------------------------------------------------------

c <- 1
c



# --------------------------------------------------------------------

v <- c(1, 2, 3)
v



# --------------------------------------------------------------------

# Addition
1 + 19

# Multiplikation
5 * 4



# --------------------------------------------------------------------

# Potenzierung
20 ^ 1

# Ganzzahldivision
21 %/% 2

# Divisionsrest (Modulo)
41 %% 21



# --------------------------------------------------------------------

`%doppel.plus%` <- function(a, b) {2*a + 2*b}
1 %doppel.plus% 1
1 %doppel.plus% 2



# --------------------------------------------------------------------

# die Zuweisung ist ein binärer Operator
# die linke Seite ist ein Symbol, die rechte ein Wert
x <- c(1, 2, 3, 4, 5)
# auch der Indexzugriff ist ein binärer Operator
# die linke Seite ist ein Symbol, die rechte ein Index
x[3]
# ein Funktionsaufruf ist ebenfalls ein binärer Operator
# die linke Seite ist ein Symbol, das auf die Funktion verweist
# die rechte Seite sind die Argumente
max(1, 2)



# --------------------------------------------------------------------

# die Negation ist ein unärer Operator
-7
# ? (zum Aufrufen der Hilfe) ist ebenfalls ein unärer Operator
?`?`



# --------------------------------------------------------------------

x <- 1

y <- list(Schuhe = "Turnschuhe", Kopfbedeckung = "Fedora", Hemd = "weiß")

z <- function(a, b, c) {a^b / c}

v <- c(1, 2, 3, 4, 5, 6, 7, 8)



# --------------------------------------------------------------------

dim(v) <- c(2, 4)

v[2, 2] <- 10

formals(z) <- alist(a = 1, b = 2, c = 3)



# --------------------------------------------------------------------

x <- 1
y <- 2
z <- 3



# --------------------------------------------------------------------

x <- 1; y <- 2; z <- 3



# --------------------------------------------------------------------

2 * (5 + 1)

# gleichwertiger Ausdruck (Funktionsaufruf)
f <- function (x) x
2 * f(5 + 1)



# --------------------------------------------------------------------

2 * 5 + 1

2 * (5 + 1)



# --------------------------------------------------------------------

f <- function() {x <- 1; y <- 2; x + y}
f()



# --------------------------------------------------------------------

{x <- 1; y <- 2; x + y}



# --------------------------------------------------------------------

# bei Evaluation innerhalb einer Funktion werden u und v
# nur in der Auswertungsumgebung der Funktion zugewiesen
f <- function() {u <- 1; v <- 2; u + v}
u

v

# bei Evaluation außerhalb einer Funktion werden u und v 
# in der aktuellen Auswertungsumgebung zugewiesen
{u <- 1; v <- 2; u + v}
u; v



# --------------------------------------------------------------------

typeof(`if`)



# --------------------------------------------------------------------

if (FALSE) "wird nicht ausgegeben"
if (FALSE) "wird nicht ausgegeben" else "wird ausgegeben"

x <- 10
if (is(x, "numeric")) x/2 else print("x ist nicht numerisch")



# --------------------------------------------------------------------

x <- 10
y <- c(8, 10, 12, 3, 17)
if (x < y) x else y



# --------------------------------------------------------------------

a <- c("a", "a", "a", "a", "a")
b <- c("b", "b", "b", "b", "b")
ifelse(c(TRUE, FALSE, TRUE, FALSE, TRUE), a, b)



# --------------------------------------------------------------------

i <- 5
repeat {if (i > 25) break else {print(i); i <- i + 5;}}



# --------------------------------------------------------------------

i <- 5
while (i <= 25) {print(i); i <- i + 5}



# --------------------------------------------------------------------

for (i in seq(from = 5, to = 25, by = 5)) print(i)



# --------------------------------------------------------------------

for (i in seq(from = 5, to = 25, by = 5)) i



# --------------------------------------------------------------------

i <- 1
for (i in seq(from = 5, to = 25, by = 5)) i
i



# --------------------------------------------------------------------

library(iterators)
Eins.bis.Fünf <- iter(1:5)
nextElem(Eins.bis.Fünf)
nextElem(Eins.bis.Fünf)
nextElem(Eins.bis.Fünf)
nextElem(Eins.bis.Fünf)
nextElem(Eins.bis.Fünf)
nextElem(Eins.bis.Fünf)



# --------------------------------------------------------------------

Wurzel.aus.1.bis.5 <- foreach(i = 1:5) %do% sqrt(i)
Wurzel.aus.1.bis.5



# --------------------------------------------------------------------

v <- 100:119



# --------------------------------------------------------------------

v[5]

v[1:5]

v[c(1, 6, 11, 16)]



# --------------------------------------------------------------------

v[[3]]



# --------------------------------------------------------------------

# Elemente 1:15 ausschließen (Angabe der negativen Indizes -1 bis -15)
v[-15:-1]



# --------------------------------------------------------------------

l <- list(a = 1, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7, h = 8, i = 9, j = 10)
l[1:3]
l[-1:-7]



# --------------------------------------------------------------------

m <- matrix(data = c(101:112), nrow = 3, ncol = 4)
m

m[3]

m[3, 4]

m[1:2, 1:2]



# --------------------------------------------------------------------

m[1:2, ]

m[3:4]

m[ ,3:4]



# --------------------------------------------------------------------

a <- array(data = c(101:124), dim = c(2, 3, 4))
class(a[1, 1,  ])

class(a[1,  ,  ])

class(a[1:2, 1:2, 1:2])

class(a[1, 1, 1, drop = FALSE])



# --------------------------------------------------------------------

m[1] <- 1000
m

m[1:2, 1:2] <- matrix(c(1001:1004), nrow = 2, ncol = 2)
m



# --------------------------------------------------------------------

v <- 1:12
v[15] <- 15
v



# --------------------------------------------------------------------

rep(c(TRUE, FALSE), 10)

v[rep(c(TRUE, FALSE), 10)]



# --------------------------------------------------------------------

# simples Beispiel: das Element holen, das gleich 103 ist
v[v == 103]

# interessanteres Beispiel: Vielfache von 3
v[v %% 3 == 0]



# --------------------------------------------------------------------

v[c(TRUE, FALSE, FALSE)]



# --------------------------------------------------------------------

l[l > 7]



# --------------------------------------------------------------------

l <- list(a = 1, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7, h = 8, i = 9, j = 10)
l$j



# --------------------------------------------------------------------

l[c("a", "b", "c")]



# --------------------------------------------------------------------

Mopros <- list(Milch = "1 l", Butter = "1 Pfd.", Eier = 12)
Mopros$Milch

Mopros[["Milch"]]

Mopros[["Mil"]]

Mopros[["Mil", exact = FALSE]]



# --------------------------------------------------------------------

Obst <- list(Äpfel = 6, Orangen = 3, Bananen = 10)
Einkaufsliste <- list(Mopros = Mopros, Obst = Obst)
Einkaufsliste

Einkaufsliste[[c("Mopros", "Milch")]]

Einkaufsliste[[c(1, 2)]]

Einkaufsliste[["Mopros"]][["Eier"]]



# ====================================================================
