# ====================================================================
# R in a Nutshell (1. Aufl., Dez. 2010)
# Kapitel 05 -- Überblick über die Programmiersprache R
# ***  R-Code  ***
# 
# Zeichenkodierung: UTF-8
# Schnappschuss   : 2011-01-25 20:11:53 h
# angelegt von    : Jörg Beyer
# ====================================================================

x <- 1

if (1 > 2) "ja" else "nein"

127 %% 10



# --------------------------------------------------------------------

"Dieser Ausdruck erscheint in der Ausgabe"; 7 + 13; exp(0+1i*pi)



# --------------------------------------------------------------------

# ein numerischer Vektor (mit drei Elementen)
c(1, 2, 3)

# ein Zeichenvektor (mit einem Element)
"Auch das ist ein Objekt"

# und eine Liste
list(c(1, 2, 3), "Auch das ist ein Objekt", "... alles in einer Liste")
# eine Funktion
function(x, y) {x + y}



# --------------------------------------------------------------------

x <- 1



# --------------------------------------------------------------------

Tiere <- c("Hund", "Katze", "Maus", "Tuba")



# --------------------------------------------------------------------

Tiere[4] <- "Elefant"



# --------------------------------------------------------------------

Tiere



# --------------------------------------------------------------------

`[<-`(Tiere, 4, "Elefant")



# --------------------------------------------------------------------

# normale Zuweisung
Äpfel <- 3
# ... und eine Zuweisung als Funktionsaufruf
`<-`(Äpfel, 3)
Äpfel

# noch eine Zuweisung, damit wir Äpfel mit Birnen vergleichen können
`<-`(Birnen, 4)
Birnen

# normaler arithmetischer Ausdruck
Äpfel + Birnen
# arithmetischer Ausdruck als Funktionsaufruf
`+`(Äpfel, Birnen)

# normale if-else-Anweisung
if (Äpfel > Birnen) "überwiegend Äpfel" else "überwiegend Birnen"
# 'if-else' als Funktionsaufruf
`if`(Äpfel > Birnen, "überwiegend Äpfel", "überwiegend Birnen")

x <- c("Äpfel", "Birnen", "Bananen", "Feigen")
# normaler Elementzugriff
x[2]
# Elementzugriff als Funktionsaufruf
`[`(x, 2)



# --------------------------------------------------------------------

u <- list(1)
v <- u
u[[1]] <- "Hut"
u
v



# --------------------------------------------------------------------

f <- function(x, i) {x[i] = 4}



# --------------------------------------------------------------------

w <- c(10, 11, 12, 13)
f(w, 1)



# --------------------------------------------------------------------

w



# --------------------------------------------------------------------

x <- 1
x
x(2)

x <- function(i) i^2
x
x(2)



# --------------------------------------------------------------------

v <- c(1, 2, 3)
v

length(v) <- 4
v



# --------------------------------------------------------------------

 2 ^ 1024
-2 ^ 1024



# --------------------------------------------------------------------

 1/0;  1/-0



# --------------------------------------------------------------------

Inf - Inf
0 / 0



# --------------------------------------------------------------------

x <- c(1, 2, 3, 4, 5)
x

typeof(x)
class(x)



# --------------------------------------------------------------------

x[2] <- "Hut"
x
typeof(x)
class(x)



# --------------------------------------------------------------------

x <- 1



# --------------------------------------------------------------------

`<-`(x, 1)



# --------------------------------------------------------------------

if (x > 1) "Birne" else "Apfel"



# --------------------------------------------------------------------

plot.xy



# --------------------------------------------------------------------

`<-`



# --------------------------------------------------------------------

if (x > 1) "Birne" else "Apfel"



# --------------------------------------------------------------------

typeof(quote(if (x > 1) "Birne" else "Apfel"))



# --------------------------------------------------------------------

quote(if (x > 1) "Birne" else "Apfel")



# --------------------------------------------------------------------

as.list(quote(if (x > 1) "Birne" else "Apfel"))



# --------------------------------------------------------------------

lapply(quote(if (x > 1) "Birne" else "Apfel"), typeof)



# --------------------------------------------------------------------

lapply(as.list(quote(if (x > 1) "Birne" else "Apfel")), typeof)



# --------------------------------------------------------------------

as.list(quote(1))



# --------------------------------------------------------------------

as.list(quote(x[2]))
as.list(quote(`[`(x, 2)))



# --------------------------------------------------------------------

deparse(quote(x[2]))
deparse(quote(`[`(x, 2)))



# ====================================================================
