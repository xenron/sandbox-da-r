# ====================================================================
# R in a Nutshell (1. Aufl., Dez. 2010)
# Kapitel 20 -- Regressionsmodelle
# ***  R-Code  ***
# 
# Zeichenkodierung: UTF-8
# Schnappschuss   : 2011-02-02 19:50:44 h
# angelegt von    : Jörg Beyer
# ====================================================================

library(RSQLite)
Trb <- dbDriver("SQLite")
BBDB <- dbConnect(Trb, 
  dbname = system.file("extdata", "BBDB.sqlite", package = "nutshellDE"))

Team.Batting.sql <- 
  'SELECT  TeamID, 
           JahrID, 
           R                    AS "Runs", 
           H - `2B` - `3B` - HR AS "Singles", 
           `2B`                 AS "Doubles", 
           `3B`                 AS "Triples", 
           HR                   AS "Homeruns", 
           BB                   AS "Walks", 
           SB                   AS "Stolen.Bases", 
           CS                   AS "Caught.Stealings", 
           SF                   AS "Sacrifice.Flies", 
           HBP                  AS "Hit.by.Pitch", 
           AB                   AS "At.Bats" 
     FROM  Teams 
     WHERE JahrID BETWEEN 2000 AND 2008 
     ORDER BY TeamID;'

Team.Batting.00bis08 <- dbGetQuery(BBDB, 
                                   statement = Team.Batting.sql)
dim(Team.Batting.00bis08)

dbDisconnect(BBDB); dbUnloadDriver(Trb)



# --------------------------------------------------------------------

library(nutshellDE)
data(Team.Batting.00bis08)



# --------------------------------------------------------------------

library(lattice)

attach(Team.Batting.00bis08)
Team.Batting.Plotdaten <- make.groups( 
  Singles          = data.frame(x = Singles,          TeamID, JahrID, Runs), 
  Doubles          = data.frame(x = Doubles,          TeamID, JahrID, Runs), 
  Triples          = data.frame(x = Triples,          TeamID, JahrID, Runs), 
  Homeruns         = data.frame(x = Homeruns,         TeamID, JahrID, Runs), 
  Walks            = data.frame(x = Walks,            TeamID, JahrID, Runs), 
  Stolen.Bases     = data.frame(x = Stolen.Bases,     TeamID, JahrID, Runs), 
  Caught.Stealings = data.frame(x = Caught.Stealings, TeamID, JahrID, Runs), 
  Hit.by.Pitch     = data.frame(x = Hit.by.Pitch,     TeamID, JahrID, Runs), 
  Sacrifice.Flies  = data.frame(x = Sacrifice.Flies,  TeamID, JahrID, Runs) 
  )
detach(Team.Batting.00bis08)

names(Team.Batting.Plotdaten)[5] <- "Spielzug"



# --------------------------------------------------------------------

xyplot(Runs ~ x | Spielzug, 
  data = Team.Batting.Plotdaten, 
  scales = list(relation = "free"), 
  pch = 19, cex = 0.2, 
  strip = strip.custom(strip.levels = TRUE, horizontal = TRUE, 
                       par.strip.text = list(cex = 0.8))
)



# --------------------------------------------------------------------

(Runs.LM <- lm(Runs ~ Singles + Doubles + Triples + Homeruns + 
               Walks + Hit.by.Pitch + Sacrifice.Flies + 
               Stolen.Bases + Caught.Stealings, 
               data = Team.Batting.00bis08))



# --------------------------------------------------------------------

(Runs.LM2 <- update(Runs.LM, 
                    Runs ~ Singles + Doubles + Triples + 
                    Homeruns + Walks + Hit.by.Pitch + 
                    Stolen.Bases + Caught.Stealings + 0))



# --------------------------------------------------------------------

lm(y ~ I(a * b))



# --------------------------------------------------------------------

Runs.LM



# --------------------------------------------------------------------

summary(Runs.LM)



# --------------------------------------------------------------------

formula(Runs.LM)



# --------------------------------------------------------------------

coef(Runs.LM)



# --------------------------------------------------------------------

confint(Runs.LM)



# --------------------------------------------------------------------

anova(Runs.LM)



# --------------------------------------------------------------------

vcov(Runs.LM)



# --------------------------------------------------------------------

deviance(Runs.LM)



# --------------------------------------------------------------------

library(car)

ncvTest(Runs.LM)



# --------------------------------------------------------------------

durbinWatsonTest(Runs.LM)



# --------------------------------------------------------------------

Runs.LM <- lm(Runs ~ Singles + Doubles + Triples + Homeruns + 
              Walks + Hit.by.Pitch + Sacrifice.Flies + 
              Stolen.Bases + Caught.Stealings, 
              data = Team.Batting.00bis08, 
              singular.ok = FALSE)



# --------------------------------------------------------------------

library(MASS)
library(nutshellDE)
data(Shiller.Index)

Hauspreise.LM  <-  lm(Hauspreisindex ~ Jahr, data = Shiller.Index)
Hauspreise.RLM <- rlm(Hauspreisindex ~ Jahr, data = Shiller.Index)
Hauspreise.LQS <- lqs(Hauspreisindex ~ Jahr, data = Shiller.Index)



# --------------------------------------------------------------------

plot(Shiller.Index[, c("Jahr", "Hauspreisindex")], 
     pch = 19, cex = 0.4)

abline(reg = Hauspreise.LM,  lty = 1)
abline(reg = Hauspreise.RLM, lty = 5)
abline(reg = Hauspreise.LQS, lty = 4)

legend(x = 1900, y = 200, 
       legend = c("lm()  (kleinste Quadrate)", 
                  "rlm() mit M-Schätzer", 
                  "lqs() mit LTS-Schätzer" 
                 ), lty = c(1, 5, 4), cex = 0.8)



# --------------------------------------------------------------------

(Runs.GLM <- glm(Runs ~ Singles + Doubles + Triples + Homeruns + 
                 Walks + Hit.by.Pitch + Sacrifice.Flies + 
                 Stolen.Bases + Caught.Stealings, 
                 data = Team.Batting.00bis08))



# --------------------------------------------------------------------

library(survival)
library(nutshellDE)
data(GSE2034)

GSE2034.Surv <- transform(GSE2034, 
  Surv = Surv(time  = GSE2034$Rückfall.o.FollowUp, 
              event = GSE2034$Rückfall, 
              type  = "right") 
)

# Kurzer Blick auf die ersten 26 Beobachtungen:
head(GSE2034.Surv$Surv, n = 26)



# --------------------------------------------------------------------

GSE2034.Fit <- survfit(Surv ~ Rezeptor.Status, 
                       data = GSE2034.Surv)



# --------------------------------------------------------------------

Linien <- c(1, 3)
Label <- levels(GSE2034.Surv$Rezeptor.Status)

plot(GSE2034.Fit, ylim = c(0.6, 1.0), lty = Linien, log = FALSE)
legend(150, 1, legend = Label, lty = Linien, cex = 0.5)



# --------------------------------------------------------------------

(GSE2034.Cox <- coxph(Surv ~ Rezeptor.Status, 
                      data = GSE2034.Surv))



# --------------------------------------------------------------------

summary(GSE2034.Cox)



# --------------------------------------------------------------------

cox.zph(GSE2034.Cox)



# --------------------------------------------------------------------

library(nutshellDE)
data(Shiller.Index)

subset(Shiller.Index, 
       subset = ((Shiller.Index$Jahr >= 2005) & 
                 (! is.na(Shiller.Index$Hauspreisindex))), 
       select = c("Jahr", "Hauspreisindex"))



# --------------------------------------------------------------------

Shiller.Spline <- smooth.spline(
  subset(Shiller.Index, 
         subset = (! is.na(Hauspreisindex)), 
         select = c("Jahr", "Hauspreisindex"))
  )

Shiller.ab.2005 <- 2005:2010
data.frame(predict(Shiller.Spline, x = Shiller.ab.2005))



# --------------------------------------------------------------------

Shiller.loess <- loess(Hauspreisindex ~ Jahr, 
                       data = Shiller.Index)

data.frame(x = Shiller.ab.2005, 
           y = predict(Shiller.loess, newdata = Shiller.ab.2005))



# --------------------------------------------------------------------

library(nutshellDE)
data(SanFrancisco.Immobilien.Preise)

# Wie vielen Fällen entspricht eine 70%-Stichprobe?
(Stp.Training <- floor(nrow(SF.Immo) * 0.7))

# Trainingsdaten: Zufallsauswahl aus den Fallindizes ziehen 
# Testdaten:      alles, was nicht zu den Trainingsdaten gehört
SF.Immo.Training.inx <- sample(1:nrow(SF.Immo), Stp.Training)
SF.Immo.Test.inx    <- setdiff(1:nrow(SF.Immo), SF.Immo.Training.inx)

# Teildatensätze zusammenstellen
SF.Immo          <- transform(SF.Immo, JahrMonat = factor(JahrMonat))
SF.Immo.Training <- SF.Immo[SF.Immo.Training.inx, ]
SF.Immo.Test     <- SF.Immo[SF.Immo.Test.inx, ]

# Fertig. Jetzt noch speichern. 
# (Nur zur Demonstration, damit Sie den Ablauf bis zum Schluss verfolgen können.)
##SF.Daten <- "~/Dokumente/Buch/Daten/SanFrancisco.Immobilien.Preise.rda"
##save(SF.Immo.Training.inx, SF.Immo.Test.inx, SF.Immo, file = SF.Daten)



# --------------------------------------------------------------------

library(rpart)

SF.Immo.Preis.rpart <- rpart(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  Wohngegend + JahrMonat, 
  data = SF.Immo.Training)



# --------------------------------------------------------------------

SF.Immo.Preis.rpart



# --------------------------------------------------------------------

plot(SF.Immo.Preis.rpart, uniform = TRUE, compress = TRUE, 
     branch = 0.7, lty = 3)
text(SF.Immo.Preis.rpart, all = TRUE, pretty = NULL, digits = 7, 
     use.n = TRUE, xpd = TRUE, cex = 0.5)



# --------------------------------------------------------------------

rsq.rpart(SF.Immo.Preis.rpart)



# --------------------------------------------------------------------

SF.Immo.Preis.prune <- prune(SF.Immo.Preis.rpart, cp = 0.06)
rsq.rpart(SF.Immo.Preis.prune)



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.rpart, 
  training = SF.Immo.Training, 
  test = SF.Immo.Test, 
  y = "Preis")

RMSE.berechnen(SF.Immo.Preis.prune, 
  training = SF.Immo.Training, 
  test = SF.Immo.Test, 
  y = "Preis")



# --------------------------------------------------------------------

library(ipred)

SF.Immo.Preis.bagging <- bagging(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  Wohngegend + JahrMonat, 
  data = SF.Immo.Training, nbagg = 100, coob = TRUE)

summary(SF.Immo.Preis.bagging)



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.bagging, 
  training = SF.Immo.Training, 
  test = SF.Immo.Test, 
  y = "Preis")



# --------------------------------------------------------------------

library(mboost)
SF.Immo.Preis.blackboost <- blackboost(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  Wohngegend + JahrMonat, 
  data = SF.Immo.Training)



# --------------------------------------------------------------------

summary(SF.Immo.Preis.blackboost)



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.blackboost, 
  training = SF.Immo.Training, 
  test = SF.Immo.Test, 
  y = "Preis")



# --------------------------------------------------------------------

library(randomForest)

SF.Immo.Preis.randfor <- randomForest(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  ZIP.Wohngegend + JahrMonat, 
  data = SF.Immo.Training, 
  na.action = na.omit)



# --------------------------------------------------------------------

SF.Immo.Preis.randfor



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.randfor, 
  training = na.omit(SF.Immo.Training), 
  test = na.omit(SF.Immo.Test), 
  y = "Preis")



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.rpart, 
  training = na.omit(SF.Immo.Training), 
  test = na.omit(SF.Immo.Test), 
  y = "Preis")



# --------------------------------------------------------------------

library(earth)

SF.Immo.Preis.earth <- earth(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  Wohngegend + JahrMonat, 
  data = na.omit(SF.Immo.Training), 
  trace = 1)



# --------------------------------------------------------------------

SF.Immo.Preis.earth



# --------------------------------------------------------------------

summary(SF.Immo.Preis.earth, details = FALSE)



# --------------------------------------------------------------------

evimp(SF.Immo.Preis.earth)



# --------------------------------------------------------------------

plot(SF.Immo.Preis.earth, caption = "")



# --------------------------------------------------------------------

plotmo(SF.Immo.Preis.earth, caption = "")



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.earth, 
  training = na.omit(SF.Immo.Training), 
  test = na.omit(SF.Immo.Test), 
  y = "Preis")



# --------------------------------------------------------------------

library(nnet)

SF.Immo.Preis.nnet <- nnet(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  Wohngegend + JahrMonat, 
  data = SF.Immo.Training, 
  size = 12, linout = TRUE, skip = TRUE, decay = 0.025, 
  na.action = na.omit)
# weights:  740



# --------------------------------------------------------------------

summary(SF.Immo.Preis.nnet)



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.nnet, 
  training = na.omit(SF.Immo.Training), 
  test = na.omit(SF.Immo.Test), 
  y = "Preis")



# --------------------------------------------------------------------

SF.Immo.Preis.ppr <- ppr(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  Wohngegend + JahrMonat, 
  data = SF.Immo.Training, 
  nterms = 20)

SF.Immo.Preis.ppr



# --------------------------------------------------------------------

par(mfrow = c(4, 3), mar = c(2.5, 2.5, 1.5, 0.5))
plot(SF.Immo.Preis.ppr)



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.ppr,
  training = na.omit(SF.Immo.Training), 
  test = na.omit(SF.Immo.Test), 
  y = "Preis")



# --------------------------------------------------------------------

library(e1071)

SF.Immo.Preis.svm <- svm(Preis ~ Schlafzimmer + 
  Grundfläche + Grundstück + GeoBreite + GeoLänge + 
  Wohngegend + JahrMonat, 
  data = SF.Immo.Training)



# --------------------------------------------------------------------

RMSE.berechnen(SF.Immo.Preis.svm, 
  training = na.omit(SF.Immo.Training), 
  test = na.omit(SF.Immo.Test), 
  y = "Preis")



# ====================================================================
