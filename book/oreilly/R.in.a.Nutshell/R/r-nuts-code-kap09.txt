# ====================================================================
# R in a Nutshell (1. Aufl., Dez. 2010)
# Kapitel 09 -- Funktionen
# ***  R-Code  ***
# 
# Zeichenkodierung: UTF-8
# Schnappschuss   : 2011-01-25 20:11:53 h
# angelegt von    : Jörg Beyer
# ====================================================================

f <- function(x, y)  x + y

f <- function(x, y) {x + y}



# --------------------------------------------------------------------

f <- function(x, y) {x + y}
f(1, 2)

g <- function(x, y = 10) {x + y}
g(1)



# --------------------------------------------------------------------

h <- function(x, y) {
  args <- as.list(match.call())
  if (is.null(args$y)) {
    y <- 10
  }
  x + y
}



# --------------------------------------------------------------------

f(1)



# --------------------------------------------------------------------

g(1, 2)



# --------------------------------------------------------------------

f <- function(x, ...) {print(x); summary(...)}
v <- c(sqrt(1:100))
f("Hier ist die 'summary' für Objekt v:", v, digits = 2)



# --------------------------------------------------------------------

alles.addieren <- function(x, ...) {
  RestArgumente <- list(...)
  for (nächstes in RestArgumente) {x <- x + nächstes}
  x
}

alles.addieren(1, 1)
alles.addieren(1, 2, 3, 4, 5)



# --------------------------------------------------------------------

f <- function(x) {return(x^2 + 3)}
f(3)



# --------------------------------------------------------------------

f <- function(x) {x^2 + 3}
f(3)



# --------------------------------------------------------------------

a <- 1:7
sapply(a, sqrt)



# --------------------------------------------------------------------

auf.3.anwenden <- function(f) {f(3)}



# --------------------------------------------------------------------

auf.3.anwenden(f = function(x) {x * 7})



# --------------------------------------------------------------------

a <- c(1, 2, 3, 4, 5)
sapply(a, function(x) {x + 1})



# --------------------------------------------------------------------

(function(x) {x + 1})(1)



# --------------------------------------------------------------------

function(x) {x + 1}(1)



# --------------------------------------------------------------------

args(sin)

args(`?`)

args(args)

args(lm)



# --------------------------------------------------------------------

f <- function(x, y = 1, z = 2) {x + y + z}
Argumentliste <- formals(f)
Argumentliste
Argumentliste$x
Argumentliste$y
Argumentliste$z



# --------------------------------------------------------------------

Argumentliste$y <- 3
formals(f) <- Argumentliste
args(f)



# --------------------------------------------------------------------

f <- function(x, y = 1, z = 2) {x + y + z}
formals(f) <- alist(x=, y = 100, z = 200)
f



# --------------------------------------------------------------------

body(f)



# --------------------------------------------------------------------

formals(f) <- alist(x=, y = 3, z = 2)
f

body(f) <- expression({x * y * z})
f



# --------------------------------------------------------------------

log.addieren <- function(erstes, zweites) {erstes + log(zweites)}



# --------------------------------------------------------------------

log.addieren(zweites = exp(4), erstes = 1)



# --------------------------------------------------------------------

log.addieren(z = exp(4), e = 1)



# --------------------------------------------------------------------

log.addieren(1, exp(4))



# --------------------------------------------------------------------

f <- function(argument1 = 10, argument2 = 20) {
   print(paste("Argument 1:", argument1))
   print(paste("Argument 2:", argument2))
}



# --------------------------------------------------------------------

f(argument = 1)



# --------------------------------------------------------------------

f(argument = 1, argument2 = 2)

f(argument = 1, argument1 = 2)



# --------------------------------------------------------------------

x
keine.Zuweisung.außerhalb <- function(i) {x <- i}
keine.Zuweisung.außerhalb(4)
x

Zuweisung.außerhalb <- function(i) {x <<- i}
Zuweisung.außerhalb(4)
x



# ====================================================================
