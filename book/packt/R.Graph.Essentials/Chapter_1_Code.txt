 
 
#   CHAPTER 1 CODE

#   Enter the following syntax at the R command line by copying and pasting into R. Note the use of the assigns operator, which consists of the less than sign followed by a minus sign. In R, we tend to use this operator in preference to the equals sign which we tend to reserve for logical equality. 

x <- seq(-4, 4, 0.2)

y <- 2*x^2 + 4*x - 7


#  You can enter x and y at the command line to see the values that R has created for us.


# Now enter the following command. 

plot(x, y)

 

plot(x, y, pch = 16, col = "red")


# Enter the following plotting syntax at the command line:

plot(x, y, pch = 16, col = "red", xlim = c(-8, 8), ylim = c(-20, 50),
main = "MY PLOT", xlab = "X VARIABLE" , ylab = "Y VARIABLE")



# Now, to create line segments between the points, try:

lines(x, y)



# Note that the lines() command is used after the plot() command.  

abline(h = 0)

abline(v = 0)   

abline(-10, 2)      # Draws a line of intercept -10 and slope 2.

text(4, 20, "TEXT")    

legend(-8,36,"This is my Legend")



# Your legend begins at the point (-8, 36) and is now centred on the point (-4, 36). The text() command will be discussed in more detail in Chapter 2. The legend() command is very powerful and provides many options for creating and placing legends. It is also discussed in Chapter 2. For now it is enough to know that you specify the position of your legend by entering relevant co-ordinates as the first two arguments, and then you enter your text inside quotation marks. 

rug(x)


# The rug() command indicates the location of points on the horizontal axis. Here is the final plot:
 

 
# By the way, let’s look at graphing individual points and creating lines that join them. We start off with a simple plot that has four points. We use the plot() command and group the x coordinates together and the y coordinates together. To do this job, we use the c operator to combine the x values and y values independently. Both groups of coordinates are written within parentheses, inside the plot() command. Enter the following syntax at the command line to create a graph with four points:

plot(c(1, 2, 3, 6), c(1, 2.5, 3.8, 9.2), pch = 16)



# Note how the elements of the first vector gave the horizontal axis values, while the elements of the second vector gave the vertical axis values. Now we join the four points using the lines() command, again grouping the horizontal axis values together and the vertical axis values together:

lines(c(1, 2, 3, 6), c(1, 2.5, 3.8, 9.2))
 
 

# Let’s create another plot using the plot() command. First we set up a vector of horizontal axis values called X, and then a vector of vertical axis values called Y.  Enter the following syntax at the command line:
 
X <- c(1, 2, 3, 4, 5, 6, 7, 8)

Y <- c(2, 6, 7, 10, 17, 19, 23, 29)



# Now let’s graph Y against X.

plot(X, Y, pch = 16) 

 


# Let’s start again and enhance the graph. Now we plot Y using red points.    

plot(X, Y, type = "o", col = "red", xlab = "MY X LABEL", ylab = "MY Y LABEL") 



# The argument type="o" produces symbols joined by straight lines. Now let’s create a title using the title() command and the arguments font.main and col.main to control the title font and colours. 

title(main = "PLOT 3", font.main = 2, col.main = "blue")


# By the way - the font number is an integer between 1 and 5 where:  1 = plain;  2 = bold;  3 = italic;  4 = bold italic; 5 = symbol.



# Colours in R
# To see the range of colours that are available in R, enter:


colors()
  

# You will see a set (a vector) of 657 colours, arranged in alphabetic order. Let’s see what we have at various indices in the vector of colours. Enter the following code. It contains square brackets, which allow us to identify and include elements of a vector that have the desired indices. 
  
colors()[c(443,109,635, 548, 201)]
       
   

# Pass parameter values to titles and labels
 
k <- 9
min <- 3
max <- 25
name <- "Mary"



# Before we start, try the following code:

paste(name, "'s Mark", sep = "")
 

# The contents of the variable name (Mary) was pasted together with the text:  ’s Mark. Each element of the text is separated by commas, while the argument sep = "" ensures that there are no breaks between the variable and the text. That’s the way the paste() function works. 




# Let’s start again and enhance the plot. Let’s create our plot using colours taken from the Hexadecimal Colour Chart.  

plot(X, Y, type="o", col="#669966", xlab = paste(name, "'s Mark", sep = ""),
ylab = paste("Marks from ", min, " to ", max,  sep = "")) 



# Now let’s create a title. 

title(main = paste("Plot ", k, " for ", name, sep = ""), font.main = 2, col.main = "#CC6600")



# The title() command is one way of creating a title. However, using the main argument you can also create a title within the plot() command, as in the next example. Here we pass the same parameter values to the title and the axis labels. Enter the following syntax at the command line:


plot(X, Y, type = "o", col = "red", main = paste("Plot ", k, " for ", name, sep = ""), pch = 16, cex = 1.4, font.main = 2, col.main = "blue", xlab = paste(name, "'s Mark", sep = ""), ylab = paste("Marks from ", min, " to ", max,  sep = "")) 

  

 
# Include a regression line

abline(lm(Y ~ X))   



#  Graph mathematical functions
 
curve(5*x**3 + 6*x**2 - 5, -2, 2 , col = "blue", main = "CUBIC CURVE")

 
pi
 


# Now we create horizontal and vertical axis points for plotting.

x <- seq(-pi, pi, length = 50)  
  
y <- sin(x)  
                     
plot(x, y, pch = 17, cex = 0.7, col = "darkgreen") 



# Now we add a line that connects the points.
                                      
lines(x, y, col = "darkgreen")  




# Now try the following approach, using 1000 axis values in order to create a smooth-looking graph: 

x <- seq(-pi, pi, length = 1000)

y <- sin(x)

plot(x, y, type = "l")
 


# The argument type = "l", produces connecting lines, but here we have so many points that the graph appears smooth. Other options include the argument type = "o" which produces symbols joined by straight lines, and type = "p" which produces points.  


# Create graphs with several curves
 
X  <- c(1, 2, 3, 4, 5, 6, 7)

Y1 <- c(2, 4, 5, 7, 12, 14, 16)

Y2 <- c(3, 6, 7, 8, 9, 11, 12)



plot(X, Y1, type="o", pch = 17, cex=1.2, col="darkgreen", ylim=c(0, 20))



lines(Y2, type="o", pch=16, lty=2, col="blue")



title(main="A PLOT OF TWO VARIABLES", col.main="red", font.main=2)




#  Customize your axes 
 
Y1 <- c(2, 4, 5, 7, 12, 14, 16)

Y2 <- c(3, 6, 7, 8, 9, 11, 12)

Y3 <- c(1, 7, 3, 2, 2, 7, 9)



# Now we calculate the maximum value of Y1, Y2 and Y3. Performing this calculation helps us to set the axis limits before we start. Otherwise, the first vector you plot will set the default axis limits, but any other data you read in may exceed those limits.  

yaxismax <- max(Y1, Y2, Y3)


# Let’s see what the maximum value really is:

yaxismax
 

plot(Y1, pch = 15, type="o", col="blue", ylim=c(0, yaxismax), axes=FALSE, ann=FALSE)  
 
axis(1, at=1:7, lab=c("A","B","C","D","E","F","G"))




    
# Create Axis Labels

# The first argument in the axis() command (the number 1) specifies the horizontal axis. The at argument allows you to specify where to place the axis labels. The vector called lab stores the actual labels.  Now we create a y axis with horizontal labels, and ticks every four units, using the syntax:  at=4*0: yaxismax  

axis(2, las=1, at=4*0: yaxismax) 
  


# Now we have included a vertical axis. The argument las controls the orientation of the axis labels. Your labels can be either parallel (las=0) or perpendicular (las=2) to your axis.

# Now we create a box around the plot and then we add in the two new curves using the lines() command, using two different symbol types. 


box()

lines(Y2, pch = 16, type="o", lty=2, col="red")

lines(Y3, pch = 17, type="o", lty=3, col="darkgreen")

title(main="SEVERAL LINE PLOTS", col.main="darkgreen", font.main=2)



# Now we label the x and y axes using title(), along with xlab and ylab.  	

title(xlab=toupper("Letters"), col.lab="purple")

title(ylab="Values", col.lab="brown")



# Finally, we create a legend at the location (1, yaxismax), though the legend() command allows us to position the legend anywhere on the graph (see Chapter 2 for details).  We include the legend keys using the c operator. We control the colours using col and ensure that the symbol types match those of the graph using pch. To do this job we include the legend colours in the same logical order in which we created the curves.  

legend(1, yaxismax, c("Y1","Y2", "Y3"), cex=0.7, col=c("blue", "red", "darkgreen"), pch=c(15, 16, 17), lty=1:3)



# Create multiple graphs on the same page
 
X  <- c(1, 2, 3, 4, 5, 6, 7)

Y1 <- c(2, 4, 5, 7, 12, 14, 16)

Y2 <- c(3, 6, 7, 8, 9, 11, 12)

Y3 <- c(1, 7, 3, 2, 2, 7, 9)



# In this example, we set the plotting environment at two rows and two columns in order to produce four graphs together. 

par(mfrow=c(2,2))    
                
plot(X,Y1, pch = 1)

plot(X,Y2, pch = 2)

plot(X,Y2, pch = 15)

plot(X,Y3, pch = 16)


 
# Save your graphs  


# To confirm that this folder is now my current working folder I entered:

getwd()
 
 

 y <- c(7, 18, 5, 13, 6, 17, 7, 18, 28, 7,17,28)

 pdf("My_Histogram.pdf")
 hist(y, col = "darkgreen")
 dev.off()
 


# To create a postscript plot of the histogram, you can use the following syntax:

 postscript(file="myplot.ps")
 hist(y, col = "darkgreen")
 dev.off()


 
# You can save and recall a plot that is currently displayed on your screen. If you have a plot on your  screen, then try: 

x = recordPlot()                           
x



# You can delete your plot but get it back again later in your session using the command: 


replayPlot(x)



# Include mathematical expressions on your plots
 
 
plot(c(1,2,3), c(2,4,9), xlab = expression(phi))
 

x <- seq(-7, 7, len = 71)


 

plot(x, cos(x),type="l",xaxt="n", xlab=expression(paste("Angle",theta)), ylab=expression("sin "*beta))


axis(1, at = c(-pi, -pi/2, 0, pi/2, pi),
lab = expression(-alpha, -alpha/2, 0, alpha/2, alpha))



text(-pi,0.5,substitute(sigma^2=="37.8"))


text(-pi/16, -0.5, expression(paste(frac(gamma*omega, sigma*phi*sqrt(3*pi)), " ",
e^{frac(-(3*x-2*mu)^2, 5*sigma^2)})))

text(pi,0,expression(hat(y) %+-% frac(se, alpha)))


