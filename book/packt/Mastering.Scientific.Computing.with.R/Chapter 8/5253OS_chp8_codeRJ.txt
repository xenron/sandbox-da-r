> rnorm(4, mean=10, sd=3)
> sample(1:100, size=5, replace=FALSE)
> sample(1:6, size=6, replace=TRUE)
> fruits <- c("apple", "orange", "strawberry", "lemon", "clementine")
> sample(fruits, size=2, replace=T)
> getRandomNbs <- function(n, m, seed){
> getRandomNbs(5, 334753, 27000)
> rng.chisq <- function(x, m) {
> v <- getRandomNbs(1000, 334753, 27000)
> rng.chisq(v, m=5)
> lag.plot(v)
> runif(n=5, min=0, max=1)
> runif(3)
> set.seed(27000)
> runif(3)
> runif(3)
> set.seed(27000)
> runif(3)
> runif(5)
> set.seed(27000)
> runif(5)
> runif(5)
> saved.seed <- .Random.seed 
> runif(5)
> runif(2)
>.Random.seed <- saved.seed 
> runif(5)
> runif(2)
> set.seed(245)
> .Random.seed <- saved.seed 
> runif(5)
> runif(2)
> .Random.seed <- saved.seed 
> runif(5)
> runif(2)
> set.seed(753)
> returnRandomNbs(10, 0, 2)
> returnRandomNbs(10, 0, 2)
> returnRandomNbs(10, 0, 2)
> runif(10, 0, 2)
> runif(10, 0, 2)
> runif(10, 0, 2)
> set.seed(23457)
> guessed.correctly <- runif(30)
>  table(guessed.correctly < 0.25)
> set.seed(23457)
> guessed.correctly <- rbern(n=30, p=.25)
> guessed.correctly
> sum(guessed.correctly)
> set.seed(23457)
> rbinom(n=30, size=1, p=.25)
> set.seed(23457)
> rbinom(n=10, size=100, p=0.05)
> rpois(15, 43600)
> set.seed(453)
> computer.lifetime <- rexp(25, 1/6)
> hist(computer.lifetime, probability=TRUE, col="gray", main="Exponential curve for computers with a mean time to failure of 6 years", cex.lab=1.5, cex.main=1.5)
> curve(dexp(x, 1/6), add=T)
> set.seed(983)
> x.exp <- rexp(10000, rate=0.4)   
> hist(x.exp, probability=TRUE, col=gray(0.8), main="", cex.axis=1.2, cex.lab=1.5)
> mean(x.exp)
> sd(x.exp)
> x.exp.means <- numeric(500)
> for (i in 1:500) {
> hist(x.exp.means, probability=TRUE, col=gray(0.8), main="", cex.axis=1.2, cex.lab=1.5)
> mean(x.exp.means)
> sd(x.exp.means)
> 2.5/sqrt(100)
> motherboard.fail <- rexp(10000, rate=1/8)
> hard.drive.fail <- rexp(10000, rate=1/6)
> par(mfrow=c(1,2)) 
> hist(motherboard.fail, probability=TRUE, col=gray(0.8), main="Simulated motherboard time to failure", cex.axis=1.2, cex.lab=1.5)
> hist(hard.drive.fail, probability=TRUE, col=gray(0.8), main="Simulated hard drive time to failure", cex.axis=1.2, cex.lab=1.5)
> ind <- (hard.drive.fail - motherboard.fail) > 0
> computer.fail <- c(motherboard.fail[ind], hard.drive.fail[!ind])
> mean(computer.fail)
> var(computer.fail)
> install.packages("mc2d")
> library(statmod) 
> library(mc2d)
> ndvar(1001)
> arsenic.conc <- 12
> drinking.habit <- mcstoc(func=rempiricalD, values=c(1,1/3,1/5), prob=c(0.432, 0.226, 0.342))
> tap.water.drank <- mcstoc(rinvgauss, mean=6, shape=60)
> arsenic.exposure <- arsenic.conc * drinking.habit * tap.water.drank
> arsenic.dose <- mcstoc(rpois, lambda=arsenic.exposure)
> prob.per.hit <- 0.0013
> risk <- 1 - (1 - prob.per.hit)^arsenic.dose
> As1 <- mc(drinking.habit, tap.water.drank, arsenic.exposure, arsenic.dose, risk)
> summary(As1)
> set.seed(223)
> ndunc(101)
> ndvar(1001)
> arsenic.conc <- mcstoc(rnorm, type="U", mean=2, sd=0.5)
> drinking.habit <- mcstoc(func=rempiricalD,type ="V", values=c(1,1/3,1/5), prob=c(0.432, 0.226, 0.342))
> tap.water.drank <- mcstoc(rinvgauss, type ="V", mean=6, shape=60)
> arsenic.exposure <- arsenic.conc * drinking.habit * tap.water.drank
> arsenic.dose <- mcstoc(rpois, type="VU", lambda=arsenic.exposure)
> prob.per.hit <- mcstoc(runif, type="U", min=0.00001, max=0.0017)
> risk <- 1 - (1 - prob.per.hit)^arsenic.dose
> As1 <- mc(arsenic.conc, drinking.habit, tap.water.drank, arsenic.exposure, arsenic.dose, prob.per.hit, risk)
> print(As1, digits=2) #output truncated, outm removed
> summary(As1)
> arsenic.conc1 <- mcstoc(rnorm, type="U", mean=12, sd=0.5)
> arsenic.conc2 <-  mcstoc(runif, type="U", min=10, max=12.7)
> arsenic.distr <- mcstoc(rbern, type="U", prob=0.85)
> arsenic.conc <- mcprobtree(arsenic.distr, list("0"=arsenic.conc1,"1"=arsenic.conc2), type="U")
> cornode(drinking.habit, tap.water.drank, target=0.5, result=TRUE, seed=223) 
> As1 <- evalmcmod(modelAs1, nsv=1001, nsu=101, seed=223)
> print(As1)
> As2 <- evalmcmod(modelAs1, nsv=100, nsu=10, seed=223)
> As3 <- evalmcmod(modelAs1, nsv=1000, nsu=100, seed=223)
> As4 <- evalmcmod(modelAs1, nsv=10000, nsu=1000, seed=223)
> hist(As1)
> plot(As1)
> hist(prob.per.hit)
> parameter1 <- mcstoc(rdirichlet, type="VU", nvariates=4, alpha=c(1,4,5,7))
> parameter1
> mcstoc(rmultinomial,type="VU", nvariates=4, size=100, prob=parameter1)
> arsenic.conc <- mcdata(c(arsenic.conc1, arsenic.conc2), type="U", nvariates=2)
> modelAs1.Bivariate <- mcmodel({
> As1.Bivariate <- evalmcmod(modelAs1.Bivariate, nsv=1001, nsu=101, seed=223)
> print(As1.Bivariate) 
> summary(As1.Bivariate)
> u <- runif(100000, min=0, max=4)
> mean(u^2)*(4-0)
> integrand <- function(x) {x^2}
> integrate(integrand, lower = 0, upper = 4)
> u <- runif(100000, min=3, max=6)
> mean(cos(u))*(6-3)
> integrand <- function(x) {cos(x)}
> integrate(integrand, lower=3, upper=6)
> U <- runif(100000) 
> V <- runif(100000)
> mean(sin(U + V))
> U <- runif(100000, min=3, max=7)
> V <- runif(100000, min=1, max=5)
> UV.mean <- mean(sin(U+V))
> UV.mean*16
> install.packages("cubature")
> library(cubature)
> f <- function(x) { sin(x[1]+ x[2]) } 
> adaptIntegrate(f, lowerLimit = c(3, 1), upperLimit = c(7, 5)) 
> u <- runif(100000, min=0, max=4)
> mean(u^2)*(4-0)
> mean(u^2/dunif(u, min=0, max=4))
> u <- runif(100000, min=1, max=pi)
> mean(exp(u)/dunif(u, min=1, max=pi))
> u <- rexp(10000) 
> mean(exp(-(u+1))/dexp(u))
> f <- function(x) { exp(-x) } 
> integrate(f, lower=1, upper=Inf)
> triangle <- function(x) {(abs(x) < 2) * (2 - abs(x))}
> x<-seq(from=-3,to=3,by=0.001)
> plot(x, triangle(x), type = "l", ylim = c(0,2), ylab = as.character("f(x)=(|x < 2|)(2-|x|)"), cex.lab=1.3)
> rectangle <- function(x) {(abs(x) < 2) * 2 }
> lines(x, rectangle(x), lty = 2)
> y1 <- triangle(x)
> y2 <- rectangle(x)
> polygon(c(x,rev(x)),c(y2,rev(y1)),col="darkgray")
> Rect1 <- runif(100000, min=-2, max=2)
> Rect2 <- runif(100000, min=0, max=2)
> length(tri.random)
> curve(dbeta(x, shape1=2, shape2=2), cex.lab=1.4)
> c <- 1.5
> Y <- runif(300,min=0,max=1)
> u <- runif(300,min=0,max=1)
> below <- which(c*u*dunif(Y,min=0,max=1) <= dbeta(Y,2,2))
> curve(dbeta(x,2,2),from=0,to=1,ylim=c(0,c), cex.lab=1.4)
> points(Y[below],c*u[below],pch="+")
> points(Y[-below],c*u[-below],pch="-")
> hist(Y[below]),
> set.seed(23564)
> n <- 100000
> T  <- 1
> lambda <- 0.65
> Rand.num <- runif(n,0,1)*(1-exp(-T*lambda))
> x = -log(1-Rand.num)/lambda
> f<-exp(-x)
> g<-lambda*exp(-lambda*x)/(1-exp(-T*lambda))
> fg<-f/g
> sum(fg)/n
> set.seed(23564)
> X <- runif(100000, 0, 1)
> Y <- exp(-X)
> mean(Y)
> var(fg)
> var(Y)
> motion <- rnorm(10000, 0, 1)
> motion <- cumsum(motion)
> plot(motion, type="l", main="Brownian Motion in 1-Dimension", xlab="time", ylab="displacement")
> x.dist <- rnorm(10000, 0, 1)
> y.dist <- rnorm(10000, 0, 1)
> x.dist <- cumsum(x.dist)
> y.dist <- cumsum(y.dist)
> plot(x.dist, y.dist, type="l", main="Brownian Motion in 2-Dimensions", xlab="time", ylab="displacement")
