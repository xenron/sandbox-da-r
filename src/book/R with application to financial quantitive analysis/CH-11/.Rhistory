setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1.read data from EXCEL file
Y <- odbcConnectExcel('data.xls')
Data_FF <-  sqlFetch(Y, 'Sheet1')        # Read some or all of a table from an ODBC database into a data frame
close(Y)
rm(Y)
Data <- na.omit(Data_FF)
sum(is.na(Data))
dim(Data)
# 3. check function
# (1).D1
w1 <- quantile(Data$RM,  probs = 0.5)
D1 <- NULL
rhoD1 <- function(Data1, W){
n <- length(Data1)
for ( i in 1:n){
if (Data1[i]< W)
D1[i] <- 1
else
D1[i] <-0
}
return(D1)
}
Result1 <- rhoD1(Data1=Data$RM, W=w1)
# (2).D2
w2 <- quantile(Data$RM,  probs = 0.95)
D2 <- NULL
rhoD2 <- function(Data1, W){
n <- length(Data1)
for ( i in 1:n){
if (Data1[i]> W)
D2[i] <- 1
else
D2[i] <-0
}
return(D2)
}
Result2<- rhoD2(Data1=Data$RM, W=w2)
# 4.fomulars of CSSD and CSAD
CSSD <- sqrt(apply((Data - Data$RM)^2, MARGIN=1, FUN=sum)/nrow(Data)) # compute the CSSD
CSAD <- apply(abs(Data - Data$RM), MARGIN=1, FUN=sum)/nrow(Data)      # compute the CSAD
plot(CSSD)
plot(CSSD, typ='l')
par(mfrow=c(1,2))
plot(CSSD, typ='l')
plot(CSAD, typ='l')
par(mfrow=c(1,1))
data.statistic(CSSD)
data.statistic(CSAD)
source("HerdBehavior.R")
HerdBehavior(Data,CSSD)
head(Data)
ls()
CSAD
names(CSAD)
variable(CSAD)
substitute(CSAD)
deparse(substitute(CSAD))
source('Sub-11.R')                 # our own functions
plotCS(CS=CSSD)
# (2) plot time series
par(mfrow=c(1,2))
plotCS(CS=CSSD)
plotCS(CS=CSAD)
par(mfrow=c(1,1))
data.statistic(CSSD)
data.statistic(CSAD)
Data$RM
names(Data)
plotCS(CS=CSSD)
plotCS(CS=CSAD)
# 4. source HerdBehavior.R for mean regression
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSSD)
HerdBehavior_MR(Data, CS=CSSD)
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSSD)
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSSD)
HerdBehavior_MR <- function(Data, CS, Result1, Result2){
# 1. parametric model
if (deparse(substitute(CSAD))== 'CSAD')
Formula <- CS ~ abs(Data$RM) + I(Data$RM^2)
else
Formula <- CS ~ Result1 + I(Result2)
MeanReg <- lm(Formula)
cat('#######################################', '\n')
cat('parametric model', '\n')
cat('#######################################', '\n')
print(summary(MeanReg))
# 2. locally polynomial
win.graph(width=5,height=4.5)
est <- locpoly(Data$RM,CS,bandwidth=0.1)
if (deparse(substitute(CSAD))== 'CSAD')
plot(est,type = "l",  xlab='Return', ylab='CSAD', main='LP-CSAD')
else
plot(est, type = "l", xlab='Return', ylab='CSSD', main='LP-CSSD')
# 3. B-splines
Data_Ana <- data.frame(CS=CS, RM=Data$RM)
cat('#######################################', '\n')
cat('B-spline model', '\n')
cat('#######################################', '\n')
print(summary(fm1 <- lm(CS ~ bs(Data$RM,df=7, degree=3), data = Data_Ana)))
}
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD)
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSSD)
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSSD, Result1, Result2)
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSSD, Result1, Result2)
(deparse(substitute(CSAD))== 'CSAD')
(deparse(substitute(CS))== 'CSAD')
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSSD, Result1, Result2)
# (2) plot time series
plotCS(CS=CSSD)
plotCS(CS=CSAD)
# 4. source HerdBehavior.R for mean regression
source("HerdBehavior_MR.R")
HerdBehavior_MR(Data, CS=CSAD, Result1, Result2)
save(Data, CSSD, CSAD, Result1, Result2, file='HerdBeh.RData')
# 0. Initializing
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QR.R for quantile regression
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
HerdBehavior_QR(Data, CS=CSAD, Result1, Result2)
# 2. source HerdBehavior_QR.R for quantile regression
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
# 2. source HerdBehavior_QR.R for quantile regression
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
# 2. source HerdBehavior_QR.R for quantile regression
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
HerdBehavior_QR(Data, CS=CSAD, Result1, Result2)
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
HerdBehavior_QR<-function(Data, CS, Result1, Result2){
# 1. parametric quantile regression
# (1) setup model
if (deparse(substitute(CS))== 'CSAD')
Formula <- CS ~ abs(Data$RM) + I(Data$RM^2)
else
Formula <- CS ~ Result1 + I(Result2^2)
Tau <- seq(0.1, 0.9, by=0.1)
# (2) estimate model
QuanReg <- rq(Formula, tau=Tau)
cat('######################################', '\n')
cat('summary of estimation', '\n')
print(summary(QuanReg, se="nid"))
cat('######################################', '\n')
#   summary(QuanReg)
#   summary(QuanReg, se="nid")
R1.lm <- R1.fit(FORMULA=Formula, Y=CS,DATA=Data,TAUS=Tau)
cat('######################################', '\n')
cat('goodness of fit', '\n')
print(R1.lm)
cat('######################################', '\n')
# 2. locally polynomial quantile regression
# (1) selection of bandwidth
win.graph(width=5,height=4.5)
if (deparse(substitute(CS))== 'CSAD')
plot(Data$RM, CS, xlab='Return', ylab='CSAD',main='bandwidth')
else
plot(Data$RM, CS, xlab='Return', ylab='CSSD',main='bandwidth')
hs <- c(1, 2, 3)*10^(-1)
for (i in 1:length(hs)){
h <- hs[i]
fit <- lprq(Data$RM, CS, h=h, tau=0.5)
lines(fit$xx, fit$fv, lty=i)
}
legend('topright', c('h=1', 'h=2', 'h=3'), lty=1:length(hs))
# (2) estimate LPQR
win.graph(width=5,height=4.5)
if (deparse(substitute(CS))== 'CSAD')
plot(Data$RM, CS, xlab='Return', ylab='CSAD',main='LPQR-CSAD')
else
plot(Data$RM, CS, xlab='Return', ylab='CSSD',main='LPQR-CSSD')
Tau <- c(0.1, 0.5, 0.9)
for (i in 1:length(Tau)){
fit <- lprq(Data$RM, CS, h=0.1, tau=Tau[i])
lines(fit$xx, fit$fv, lty=i)
}
legend('topright', c('tau=0.1', 'tau=0.5', 'tau=0.9'), lty=1:length(Tau))
# 3. B-splines quantile regression
win.graph(width=5,height=4.5)
Data_Ana <- data.frame(CS=CS, RM=Data$RM)
if (deparse(substitute(CS))== 'CSAD')
plot(Data_Ana$RM, Data_Ana$CS, type='n', xlab='Return', ylab='CSAD',main='BSQR-CSAD')
else
plot(Data_Ana$RM, Data_Ana$CS, type='n', xlab='Return', ylab='CSSD',main='BSQR-CSSD')
points(Data$RM, Data_Ana$CS, cex=0.75)
for (i in 1:length(Tau)){
fit <- rq(CS ~ bs(RM, df=7, degree=3), tau=Tau[i], data=Data_Ana)
lines(sort(Data_Ana$RM), predict(fit, newdata=data.frame(RM=sort(Data_Ana$RM)), tau=Tau[i]), lty=i)
}
legend('bottomright', c('tau=0.1', 'tau=0.5', 'tau=0.9'), lty=1:length(Tau))
F_test.nlm <- F.test(FORMULA=CS ~ bs(RM, df=7, degree=3),Y=Data_Ana$CS, EXPLAINATORS=7, DATA=Data_Ana, TAUS=Tau)
cat('######################################', '\n')
cat('F test', '\n')
print(F_test.nlm)
cat('######################################', '\n')
}
source("HerdBehavior_QR.R")
HerdBehavior_QR(Data, CS=CSSD, Result1, Result2)
?qrnn.fit
arg(qrnn.fit)
arguments(qrnn.fit)
args(qrnn.fit)
args(qrnn.predict)
appros(qrnn.predict)
apros(qrnn.predict)
?qrnn.predict
qrnn.cost
args(qrnn.cost)
?qrnn.cost
qrnn.eval
qrnn.predict
qrnn.initia
qrnn.initial
help(package='qrnn')
args(quantile.dtn)
?quantile.dtn
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
y
yfit
length(y)
length(yfit)
Js
AICs <- numeric(length(Js))
for (i in seq(1:Js)){
AICs[i] <- AIC.rq(y, yfit, i, tau)
}
AIC.opt <- AICs[which.min(AICs)]
J.opt <- Js[which.min(AICs)]
data.frame(AIC.opt=AIC.opt,J.opt=J.opt)
tau
AICs <- numeric(length(Js))
for (i in seq_along){
AICs[i] <- AIC.rq(y, yfit, i, tau)
}
AIC.opt <- AICs[which.min(AICs)]
J.opt <- Js[which.min(AICs)]
data.frame(AIC.opt=AIC.opt,J.opt=J.opt)
AICs <- numeric(length(Js))
for (i in seq_along(Js)){
AICs[i] <- AIC.rq(y, yfit, i, tau)
}
AIC.opt <- AICs[which.min(AICs)]
J.opt <- Js[which.min(AICs)]
data.frame(AIC.opt=AIC.opt,J.opt=J.opt)
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
library(rq)
library(quantreg)
help(package='quantreg')
AIC.rq
AIC.rq
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
yfit
dim(yfit)
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
?qrnn
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
AICs
AIC.opt <- AICs[which.min(AICs)]
n.hidden.opt <- n.hidden[which.min(AICs)]
cat('################################', '\n')
print(data.frame(AIC.opt=AIC.opt, n.hidden.opt=n.hidden.opt))
cat('################################', '\n')
n.hidden.opt
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
# 1. load data from last example
load('HerdBeh.RData')
# 2. source HerdBehavior_QRNN.R for quantile regression neural network
source("HerdBehavior_QRNN.R")
HerdBehavior_QRNN(Data, CS=CSAD)
HerdBehavior_QRNN<-function(Data, CS){
# 1. setup dataset
Data_Ana <- data.frame(CS=CS, RM=Data$RM)
x <- as.matrix(Data_Ana$RM)
y <- as.matrix(Data_Ana$CS)
# 2.  find the optimal n.hidden through AIC
n.hidden <- 3:8
m <- ncol(x)
AICs <- numeric(length(n.hidden))
for (i in 1:length(n.hidden)){
set.seed(1)
Fit.qrnn <- qrnn.fit(x, y, n.hidden=n.hidden[i], tau=0.5, n.trials=2)
x.sort <- as.matrix(sort(x))
yfit <- qrnn.predict(x.sort, Fit.qrnn)
J <- n.hidden[i]
n.parm <- m*J + 2*J + 1
AICs[i] <- AIC.qrnn(y, yfit, n.parm, tau=0.5)
}
AIC.opt <- AICs[which.min(AICs)]
n.hidden.opt <- n.hidden[which.min(AICs)]
cat('################################', '\n')
print(data.frame(AIC.opt=AIC.opt, n.hidden.opt=n.hidden.opt))
cat('################################', '\n')
# 3. fit a QRNN model
win.graph(width=5,height=4.5)
Tau <- c(0.1, 0.5, 0.9)
plot(Data_Ana$RM, Data_Ana$CS, xlab='Market Return', ylab='CSAD',main='QRNN-CSAD')
for (i in 1:length(Tau)){
set.seed(1)
Fit.qrnn <- qrnn.fit(x, y, n.hidden=n.hidden.opt, tau=Tau[i], n.trials=3)
x.sort <- as.matrix(sort(x))
Pre.qrnn <- qrnn.predict(x.sort, Fit.qrnn)
lines(x.sort, Pre.qrnn,lty=i)
}
legend('bottomright', c('tau=0.1', 'tau=0.5', 'tau=0.9'), lty=1:length(Tau))
}
AIC.qrnn <- function(y, yfit, n.parm, tau){
N <- length(y)
AIC <- log(mean(rho(y-yfit, tau))) + n.parm/N
AIC
}
#############################################################
# 0. Initializing
# (1) set path
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-11')
rm(list=ls())
# (2) load packages
library('RODBC')                   # for reading EXCEL file
library(KernSmooth)                # for kernel smooth
library(quantreg)                  # for quantile regression
library(splines)                   # for spline functions
library(qrnn)                      # for quantile regression neural network
library(fGarch)                    # for GARCH model
library(caret)                     # for classification and regression training
library(fBasics)                   # for markets and basic statistics
source('Sub-11.R')                 # our own functions
AIC
