x
fBasics::rowSkewness(x)
fBasics::rowSkewness(as.matrix(x))
fBasics::rowSkewness(as.matrix(x, ncol=1))
as.matrix(x, ncol=1)
fBasics::rowSkewness(as.matrix(x, nrow=1))
as.matrix(x, nrow=1)
fBasics::rowSkewness(matrix(x, nrow=1))
jbtst
jbtst <- fBasics::jarqueberaTest(x)
jbtst
class(jbtst)
names(jbtst)
jbtst[1]
jbtst[[1]]
??bera
moments::jarque.test(x)
jbtst <- moments::jarque.test(x)
jbtst
class(jbtst)
names(jbtst)
help(package='moments')
skew <- moments::skewness(x)
skew
jbtst <- moments::jarque.test(x)
jbtst
names(jbtst)
jarque.test
moments::jarque.test
# 1. define a function
stat <- function(x, plot.it=TRUE){
if (!is.vector(x)) stop('argument x is not a vector, please check it.')
if (!is.numeric(x)) stop('argument x is not a numeric, please check it.')
mean <-  mean(x)
median <- median(x)
maximum <- max(x)
minimum <- min(x)
sd <- sd(x)
skew <- moments::skewness(x)
kurt <- moments::kurtosis(x)
jbtst <- moments::jarque.test(x)
stats <- c(mean=mean, median=median, maximum=maximum, minimum=minimum, skew=skew, kurt=kurt)
test <- c(JB=jbtst$statistic, p.value=jbtst$p.value)
if (plot.it){
hist(x)
}
results<- list(stats=stats, test=test)
return(results)
}
stat(x, plot.it=TRUE)
x
# 1. define a function
stat <- function(x, plot.it=TRUE){
if (!is.vector(x)) stop('argument x is not a vector, please check it.')
if (!is.numeric(x)) stop('argument x is not a numeric, please check it.')
mean <-  mean(x)
median <- median(x)
maximum <- max(x)
minimum <- min(x)
sd <- sd(x)
skew <- moments::skewness(x)
kurt <- moments::kurtosis(x)
jbtst <- moments::jarque.test(x)
stats <- c(mean=mean, median=median, maximum=maximum, minimum=minimum, skew=skew, kurt=kurt)
test <- c(JB=jbtst$statistic, p.value=jbtst$p.value)
if (plot.it){
par(mfrow=c(1,1))
hist(x)
}
results<- list(stats=stats, test=test)
return(results)
}
stat(x, plot.it=TRUE)
?boxplot
?qqplot
# 1. define a function
stat <- function(x, plot.it=TRUE){
if (!is.vector(x)) stop('argument x is not a vector, please check it.')
if (!is.numeric(x)) stop('argument x is not a numeric, please check it.')
mean <-  mean(x)
median <- median(x)
maximum <- max(x)
minimum <- min(x)
sd <- sd(x)
skew <- moments::skewness(x)
kurt <- moments::kurtosis(x)
jbtst <- moments::jarque.test(x)
stats <- c(mean=mean, median=median, maximum=maximum, minimum=minimum, skew=skew, kurt=kurt)
test <- c(JB=jbtst$statistic, p.value=jbtst$p.value)
if (plot.it){
par(mfrow=c(1,2))
hist(x)
qqplot(x)
qqnorm(x)
qqline(x)
}
results<- list(stats=stats, test=test)
return(results)
}
stat(x, plot.it=TRUE)
# 1. define a function
stat <- function(x, plot.it=TRUE){
if (!is.vector(x)) stop('argument x is not a vector, please check it.')
if (!is.numeric(x)) stop('argument x is not a numeric, please check it.')
mean <-  mean(x)
median <- median(x)
maximum <- max(x)
minimum <- min(x)
sd <- sd(x)
skew <- moments::skewness(x)
kurt <- moments::kurtosis(x)
jbtst <- moments::jarque.test(x)
stats <- c(mean=mean, median=median, maximum=maximum, minimum=minimum, skew=skew, kurt=kurt)
test <- c(JB=jbtst$statistic, p.value=jbtst$p.value)
if (plot.it){
par(mfrow=c(1,2))
hist(x)
qqnorm(x)
qqline(x)
}
results<- list(stats=stats, test=test)
return(results)
}
stat(x, plot.it=TRUE)
# 2. read data
library(RODBC)                                                          # loading package
SSEC_Data <- odbcConnectExcel('CH-01-05.xls')                           # reading excel data
SSEC <-sqlFetch(SSEC_Data, 'SSEC')                                      # Extracting the data from SSEC workbook
SSEC_shjc <- sqlFetch(SSEC_Data, 'SSEC-600009')                         # Extracting the data from SSEC-600009 workbook
SSEC_scgf <- sqlFetch(SSEC_Data, 'SSEC-600008')                         # Extracting the data from SSEC-600008 workbook
SSEC_zggm <- sqlFetch(SSEC_Data, 'SSEC-600007')                         # Extracting the data from SSEC-600007 workbook
close(SSEC_Data)
detach(package:RODBC)
SSEC_shjc
SSEC_shjc_stat <- stat(x=SSEC_shjc[,2], plot.it=TRUE)
SSEC_scgf_stat <- stat(x=SSEC_scgf[,2], plot.it=TRUE)
SSEC_zggm_stat <- stat(x=SSEC_zggm[,2], plot.it=TRUE)
SSEC_shjc_stat
stats <- matrix(NA, nrow=3, ncol=6)
tests <- matrix(NA, nrow=3, ncol=2)
stats[1,] <- SSEC_shjc_stat$stats
stats[2,] <- SSEC_scgf_stat$stats
stats[3,] <- SSEC_zggm_stat$stats
stats
SSEC_shjc_stat$stats
rbind(SSEC_shjc_stat$stats, SSEC_scgf_stat$stats)
rbind(SSEC_shjc_stat$stats, SSEC_scgf_stat$stats, SSEC_scgf_stat$stats)
stats <- rbind(SSEC_shjc_stat$stats, SSEC_scgf_stat$stats, SSEC_zggm_stat$stats)
stats
stats <- rbind(SSEC_shjc_stat$stats, SSEC_scgf_stat$stats, SSEC_zggm_stat$stats)
rownames(stats) <- c('shjc', 'scgf', 'zggm')
print(stats)
tests <- rbind(SSEC_shjc_stat$test, SSEC_scgf_stat$test, SSEC_zggm_stat$test)
rownames(tests) <- c('shjc', 'scgf', 'zggm')
print(tests)
# 1. define a function
stat <- function(x, plot.it=TRUE){
if (!is.vector(x)) stop('argument x is not a vector, please check it.')
if (!is.numeric(x)) stop('argument x is not a numeric, please check it.')
mean <-  mean(x)
median <- median(x)
maximum <- max(x)
minimum <- min(x)
sd <- sd(x)
skew <- moments::skewness(x)                                     # need package 'moments'
kurt <- moments::kurtosis(x)                                     # need package 'moments'
jbtst <- moments::jarque.test(x)                                 # need package 'moments'
stats <- c(mean=mean, median=median, maximum=maximum, minimum=minimum, skew=skew, kurt=kurt)
test <- c(JB=jbtst$statistic, p.value=jbtst$p.value)
if (plot.it){
par(mfrow=c(1,2))
hist(x)
qqnorm(x)
qqline(x)
}
results<- list(stats=round(stats, digits=3), test=round(test, digits=3))
return(results)
}
# 2. read data
library(RODBC)                                                          # loading package
SSEC_Data <- odbcConnectExcel('CH-01-05.xls')                           # reading excel data
SSEC <-sqlFetch(SSEC_Data, 'SSEC')                                      # Extracting the data from SSEC workbook
SSEC_shjc <- sqlFetch(SSEC_Data, 'SSEC-600009')                         # Extracting the data from SSEC-600009 workbook
SSEC_scgf <- sqlFetch(SSEC_Data, 'SSEC-600008')                         # Extracting the data from SSEC-600008 workbook
SSEC_zggm <- sqlFetch(SSEC_Data, 'SSEC-600007')                         # Extracting the data from SSEC-600007 workbook
close(SSEC_Data)
detach(package:RODBC)
# 3. compute descriptive statistics and check the normality of the data
SSEC_shjc_stat <- stat(x=SSEC_shjc[,2], plot.it=TRUE)
SSEC_scgf_stat <- stat(x=SSEC_scgf[,2], plot.it=TRUE)
SSEC_zggm_stat <- stat(x=SSEC_zggm[,2], plot.it=TRUE)
stats <- rbind(SSEC_shjc_stat$stats, SSEC_scgf_stat$stats, SSEC_zggm_stat$stats)
rownames(stats) <- c('shjc', 'scgf', 'zggm')
print(stats)
tests <- rbind(SSEC_shjc_stat$test, SSEC_scgf_stat$test, SSEC_zggm_stat$test)
rownames(tests) <- c('shjc', 'scgf', 'zggm')
print(tests)
# 4. debug the function
source('sub-01.R')
data.sim <- rnorm(1000)
stat(x=data.sim, plot.it=TRUE)
# 4. debug the function
rm(list=ls())
source('sub-01.R')
data.sim <- rnorm(1000)
stat(x=data.sim, plot.it=TRUE)
stat(x=data.sim.1, plot.it=TRUE)
# 4. debug the function
rm(list=ls())
source('sub-01.R')
data.sim.1 <- rnorm(1000)
data.sim.2 <- matrix(rnorm(2000), nrow=2)
stat(x=data.sim.1, plot.it=TRUE)
stat(x=data.sim.2, plot.it=TRUE)
stat(x=data.sim.2, plot.it=TRUE)
# 4. debug the function
rm(list=ls())
# 4. debug the function
rm(list=ls())
source('sub-01.R')
set.seed(12345)
data.sim.1 <- rnorm(1000)
data.sim.2 <- matrix(rnorm(2000), nrow=2)
stat(x=data.sim.1, plot.it=TRUE)
stat(x=data.sim.2, plot.it=TRUE)
# 0. initializing
setwd('E:/programe/book/R with application to financial quantitive analysis/CH-01')
rm(list = ls())
# 1. define a function
stat <- function(x, plot.it=TRUE){
if (!is.vector(x)) stop('argument x is not a vector, please check it.')
if (!is.numeric(x)) stop('argument x is not a numeric, please check it.')
mean <-  mean(x)
median <- median(x)
maximum <- max(x)
minimum <- min(x)
sd <- sd(x)
skew <- moments::skewness(x)                                     # need package 'moments'
kurt <- moments::kurtosis(x)                                     # need package 'moments'
jbtst <- moments::jarque.test(x)                                 # need package 'moments'
stats <- c(mean=mean, median=median, maximum=maximum, minimum=minimum, skew=skew, kurt=kurt)
test <- c(JB=jbtst$statistic, p.value=jbtst$p.value)
if (plot.it){
par(mfrow=c(1,2))
hist(x)
qqnorm(x)
qqline(x)
}
results<- list(stats=round(stats, digits=3), test=round(test, digits=3))   # set digits
return(results)
}
# 2. read data
library(RODBC)                                                          # loading package
SSEC_Data <- odbcConnectExcel('CH-01-05.xls')                           # reading excel data
SSEC <-sqlFetch(SSEC_Data, 'SSEC')                                      # Extracting the data from SSEC workbook
SSEC_shjc <- sqlFetch(SSEC_Data, 'SSEC-600009')                         # Extracting the data from SSEC-600009 workbook
SSEC_scgf <- sqlFetch(SSEC_Data, 'SSEC-600008')                         # Extracting the data from SSEC-600008 workbook
SSEC_zggm <- sqlFetch(SSEC_Data, 'SSEC-600007')                         # Extracting the data from SSEC-600007 workbook
close(SSEC_Data)
detach(package:RODBC)
# 3. compute descriptive statistics and check the normality of the data
SSEC_shjc_stat <- stat(x=SSEC_shjc[,2], plot.it=TRUE)
SSEC_scgf_stat <- stat(x=SSEC_scgf[,2], plot.it=TRUE)
SSEC_zggm_stat <- stat(x=SSEC_zggm[,2], plot.it=TRUE)
stats <- rbind(SSEC_shjc_stat$stats, SSEC_scgf_stat$stats, SSEC_zggm_stat$stats)
rownames(stats) <- c('shjc', 'scgf', 'zggm')
print(stats)
tests <- rbind(SSEC_shjc_stat$test, SSEC_scgf_stat$test, SSEC_zggm_stat$test)
rownames(tests) <- c('shjc', 'scgf', 'zggm')
print(tests)
?browser
# 4. debug the function
rm(list=ls())
source('sub-01.R')
set.seed(12345)
data.sim.1 <- rnorm(1000)
data.sim.2 <- matrix(rnorm(2000), nrow=2)
stat(x=data.sim.1, plot.it=TRUE)           # argument x is a vector with normal distributed
stat(x=data.sim.2, plot.it=TRUE)           # argument x is not a vector
# 4. debug the function
rm(list=ls())
source('sub-01.R')
set.seed(12345)
data.sim.1 <- rnorm(1000)
data.sim.2 <- matrix(rnorm(2000), nrow=2)
stat(x=data.sim.1, plot.it=TRUE)           # argument x is a vector with normal distributed
ls()
set.seed(12345)
data.sim.1 <- rnorm(1000)
data.sim.2 <- matrix(rnorm(2000), nrow=2)
# 4. debug the function
rm(list=ls())
source('sub-01.R')
set.seed(12345)
data.sim.1 <- rnorm(1000)
data.sim.2 <- matrix(rnorm(2000), nrow=2)
stat(x=data.sim.1, plot.it=TRUE)           # argument x is a vector with normal distributed
mean <-  mean(x)
median <- median(x)
maximum <- max(x)
minimum <- min(x)
sd <- sd(x)
skew <- moments::skewness(x)                                     # need package 'moments'
kurt <- moments::kurtosis(x)                                     # need package 'moments'
jbtst <- moments::jarque.test(x)                                 # need package 'moments'
stats <- c(mean=mean, median=median, maximum=maximum, minimum=minimum, skew=skew, kurt=kurt)
test <- c(JB=jbtst$statistic, p.value=jbtst$p.value)
test
stat(x=data.sim.2, plot.it=TRUE)           # argument x is not a vector
# 0. Initializing
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-01')
rm(list = ls())
# 1. Object
ls()
x <- 8
rm(x)
rm(list=ls())
# 2. Basic types
# (1) numeric
x <- 12
length(x)
class(x)
# (2) logical
y <- TRUE
class(y)
length(y)
# (3) character
z <- "Display \"a\" string "
w <- 'Display "b"  string '
cat(z)
cat(w)
class(z);class(w)
# (4) complex
m <- 2+3i
class(m)
length(m)
# 3. Vector
x <- c(1,3,5,7)
x
x[2]
y <- 1:10
y
1:10-1
1:(10-1)
seq(1,10,3)
seq(1,10)
seq(10,1,-2)
seq(1,by=3,length=4)
rep(1,3)
rep(c(2,4),3)
rep(c(2,4),each=3)
rep(2:4,rep(2,3))
# 4. Array and Matrix
# (1) Array
X <- array(1:30,dim=c(5,6))
X
Z <- array(1:32,dim=c(4,4,2))
Z
Z[2,3,2]
Z[1:3,2,1]
Z[,,2]
dim(Z)
w <- 1:12
class(w)
dim(w) <- c(2,3,2)
w
class(w)
# (2) Matrix
matrix(seq(1:20),nrow=5,ncol=4)
M <-matrix(seq(1:20),nrow=5,ncol=4,byrow=TRUE,
dimnames=list(c("r1","r2","r3","r4","r5"),c("c1","c2","c3","c4")))
M
M[2,3]
M[1:3,3]
M[1:3,3,drop=FALSE]
M[-1,]
M[1:3,-c(1,3)]
diag(M)
diag(1:3)
diag(3)
Tri <- matrix(1:9,3,3)
Tri[upper.tri(Tri)] <- 0
Tri
# 5. List and Data.frame
# (1) List
Stu.Lt <- list(name="ZhangSan",stu.no="20140224",age=21,grade=c(90,85,96))
Stu.Lt
Stu.Lt[[2]]
class(Stu.Lt[[2]])
Stu.Lt[2]
class(Stu.Lt[2])
Stu.Lt[1:2]
Stu.Lt[[4]][1]
Stu.Lt[[4]][1:2]
Stu.Lt["name"]
class(Stu.Lt["name"])
Stu.Lt$stu.no
Stu.Lt$grade
names(Stu.Lt)
Stu.Lt$Project <- c("programming","sport")
Stu.Lt$stu.no <- NULL
Stu.Lt$name <- "LiSi"
Stu.Lt
unlist(Stu.Lt)
# (2) Data.frame
df <- data.frame(name=c("ZhangSan","XiaoHong","LiSi","XiaoLan"),
sex=c("M","F","M","F"),age =c(20,21,19,20),weight=c(110,90,128,102))
df
rownames(df) <- c("one","two","three","four")
df
df[1:2,3:4]
df[["age"]]
df$weight
# 6. Factor
factor(1:4)
factor(1:4,levels=1:2)
factor(c((1:4),(4:1)),labels=c("A","B","C","D"))
factor(1:4,exclude=2)
sex <- c("M","F","M","F")
sexf <- factor(sex)
sexf
levels(sexf)
table(sexf)
# 7. Expression
e1 <- 12; e2 <- 3.5
f <- expression(sin(e1)+e2^2)
f
eval(f)
D(f,"e1")
D(f,"e2")
set.seed(12345)
p1 <- rnorm(100)
p2 <- runif(100)
model.lm <- lm(p2~p1+I(p1^2))
summary(model.lm)
# 0. Initializing
setwd('F:/programe/book/R with application to financial quantitive analysis/CH-01')
rm(list = ls())
# 1. plot function demo
set.seed(12345)
x <- sample(c(1:100),100)
y <- sample(c(1:100),100)
xt <- ts(x)
xy <- cbind(x, y)
f <- as.factor(c(rep('A',20),rep('B',30),rep('C',50)))
par(mfrow=c(2,3),mar=c(5,4,3,2))                                       # The graphic panel structure
plot(x)
plot(xt)
plot(xy)
plot(x,y)
plot(f)
plot(f,y)
# 2. pairs and coplot function demo
data(morley)
pairs(morley)
coplot(uptake ~ conc | Plant, data = CO2,show.given = FALSE, type = "b")
# 3. Graphics case
# (1) reading SSEC index
library(RODBC)                                                          # loading package
SSEC_Data <- odbcConnectExcel('CH-01-05.xls')                           # reading excel data
SSEC <-sqlFetch(SSEC_Data, 'SSEC')                                      # Extracting the data from SSEC workbook
SSEC_shjc <- sqlFetch(SSEC_Data, 'SSEC-600009')                         # Extracting the data from SSEC-600009 workbook
SSEC_scgf <- sqlFetch(SSEC_Data, 'SSEC-600008')                         # Extracting the data from SSEC-600008 workbook
SSEC_zggm <- sqlFetch(SSEC_Data, 'SSEC-600007')                         # Extracting the data from SSEC-600007 workbook
close(SSEC_Data)
detach(package:RODBC)
# (2) compute return series
Close.ptd.SSEC <- SSEC$SSEC_Close                                        # Extract the day the closing price information
Close.rtd.SSEC <- diff(log(Close.ptd.SSEC))*100                          # Calculation daily log returns
# (3) Close price of Sample stocks in SSEC
Close.ptd.shjc <- SSEC_shjc$SSEC_600009_Close
Close.ptd.scgf <- SSEC_scgf$SSEC_600008_Close
Close.ptd.zggm <- SSEC_zggm$SSEC_600007_Close
# (4) Drawing SSEC Return Series, Scatter, ACF and PACF Figure
# win.graph(width=7,height=6.5)                                          # The size of the Settings window
par(mfrow=c(2,2),mar=c(5,4,3,2))                                       # The graphic panel structure
Close.ptd.SSEC.ts<-ts(Close.ptd.SSEC,start=c(2006),freq=241)
plot(Close.ptd.SSEC.ts, type="l",main="(a) SSEC Close Price Series",xlab="Date",ylab="Price",cex.main=0.95,las=1)
plot(Close.ptd.shjc[1:20], type="p",pch=17,main="(b) Close Price of Sample stocks[1:20] ",
xlab="Time",ylab="Price",cex.main=0.95,ylim=c(4,14),las=1)      # Drawing the scatter diagram of 20 Close Price
points(Close.ptd.scgf[1:20],pch=15)
points(Close.ptd.zggm[1:20],pch=14)
legend("bottomright", legend=c("SHJC_600009","SCGF_600008","ZGGM_600007"),
pch=c(17,15,14),cex=0.7,lty=c(-1,-1,-1))
acf(Close.rtd.SSEC,main='',xlab='Lag',ylab='ACF',las=1)                 # The Autocorrelation  Test
title(main='(c) SSEC ACF Test',cex.main=0.95)
pacf(Close.rtd.SSEC,main='',xlab='Lag',ylab='PACF',las=1)               # The Partial autocorrelation Test
title(main='(d) SSEC PACF Test',cex.main=0.95)
# (5) Drawing  Q-Q, ecdf, density and hist figure
# win.graph(width=7,height=6.5)                                           # The size of the Settings window
par(mfrow=c(2,2),mar=c(5,4,3,2))
qqnorm(Close.rtd.SSEC,main="(a) Normal QQ of SSEC ",cex.main=0.95)      # QQ picture of test of normality
qqline(Close.rtd.SSEC)
ECD.SSEC <- ecdf(Close.rtd.SSEC[1:10])
plot(ECD.SSEC,lwd = 2,main="(b) ecdf of SSEC[10]",cex.main=0.95,las=1)  # Drawing empirical distributions of return 10 sample size
xx <- unique(sort(c(seq(-3, 2, length=24), knots(ECD.SSEC))))           # Finding knots
lines(xx, ECD.SSEC (xx))                                                # Drawing lines with knot
abline(v=knots(ECD.SSEC),lty=2,col='gray70')                            # Drawing lines of perpendicular to the x axis
x1 <- c((-4):3)
lines(x1,pnorm(x1,mean(Close.rtd.SSEC[1:10]),sd(Close.rtd.SSEC[1:10])))   # Drawing the normal distribution curve
D <-density(Close.rtd.SSEC)
plot(D, main="(c) Distribution of SSEC ",xlab="Return ",
xlim = c(-7,7), ylim=c(0,0.5),cex.main=0.95)                       # Drawing kernel density curve
polygon(D, col="gray", border="black")                                  # Filling kernel density curve of closed section
curve(dnorm,lty = 2, add = TRUE)                                        # Drawing normal density curve
abline(v=0,lty = 3)                                                     # Drawing lines of perpendicular to the x=0 axis
legend("topright", legend=c("Kernel_Density","Nor_Distribution","Vertical_Line"),lty=c(1,2,3),cex=0.7)
hist(Close.rtd.SSEC[1:100],xaxt='n',main='(d) Histogram of SSEC[100]',
xlab='Return/100',freq=F,cex.main=0.95,las=1)        # Drawing histogram of return 100 sample size and not displaying x axis labels
x2 <- c(-6:4)
lines(x2,dnorm(x2,mean(Close.rtd.SSEC[1:100]),sd(Close.rtd.SSEC[1:100]))) # Drawing normal probability density curve
axis(1,at=axTicks(1),labels=as.integer(axTicks(1))/100)                   # Adding x axis labels and displaying smaller 100 times
